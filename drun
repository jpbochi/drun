#!/usr/bin/env sh
set -o errexit
set -o nounset
set -o noglob

usage_noexit() {
  echo >&2 'Usage: drun [-hkxNP] [-E ENV_REGEX] [-e ENV_SPEC]* [-v VOL_SPEC]* [-I image|image] [command]'
  echo >&2 '  -h           Help'
  echo >&2 '  -k           Keep container after run (i.e. does not user docker run --rm option)'
  echo >&2 '  -x           Enables bash xtrace so that exact `docker run` command is displayed'
  echo >&2 '  -N           Uses node:AUTO image, where AUTO is detected from a local package.json if any (also mounts .npmrc, if present)'
  echo >&2 '  -P           Mounts your ~/.npm/ into the container (Only useful with node, obviously)'
  echo >&2 '  -v VOL_SPEC  Adds a --volume option to `docker run`'
  echo >&2 '  -e ENV_SPEC  Adds a --env option to `docker run`'
  echo >&2 '  -E ENV_REGEX Forwards local env variables whose names match ENV_REGEX to container'
  echo >&2 '  -I image     Tells which docker image to use'
}
usage() {
  usage_noexit
  exit 1
}

node_version() {
  if [ ! -f package.json ]; then
    echo 'latest'
  elif hash jq 2> /dev/null; then
    echo $(jq -r -e '.engines.node // "latest"' package.json)
  else
    echo $(python -c "import json;print json.load(open('package.json'))['engines']['node']" 2> /dev/null || echo latest)
  fi
}

CURRENT_DIR=$(pwd)
CONTAINER_HOME=$CURRENT_DIR
XTRACE=""
while getopts ':e:E:hI:kNPv:x' OPT; do
  case $OPT in
    E)
      ENV_REGEX="$OPTARG";;
    e)
      EXTRA_OPTS="${EXTRA_OPTS:-} -e $OPTARG";;
    h)
      usage_noexit && exit;;
    I)
      IMAGE="$OPTARG";;
    k)
      RM_OPT="";;
    N)
      IMAGE="node:$(node_version)"
      if [ -r "$HOME/.npmrc" ]; then
        EXTRA_OPTS="${EXTRA_OPTS:-} -v $HOME/.npmrc:/usr/etc/npmrc:ro -v $HOME/.npmrc:/usr/local/etc/npmrc:ro"
      fi
      ;;
    P)
      EXTRA_OPTS="${EXTRA_OPTS:-} -v $CONTAINER_HOME/.npm/_git-remotes"
      EXTRA_OPTS="${EXTRA_OPTS:-} -v $HOME/.npm:$CONTAINER_HOME/.npm"
      ;;
    v)
      EXTRA_OPTS="${EXTRA_OPTS:-} -v $OPTARG";;
    x)
      XTRACE="y";;
    \?)
      echo >&2 "Unknown option -$OPTARG"
      usage;;
    :)
      echo >&2 "Missing argument for option -$OPTARG"
      usage;;
  esac
done
shift $((OPTIND-1))

if [ -z "${IMAGE:-}" ]; then
  IMAGE="${1:-}"
  [ -z "$IMAGE" ] && usage
  shift
fi

if [ -n "${ENV_REGEX:-}" ]; then
  ENV_FILE=$(echo ".local-env-$$")
  env | grep '=' | awk -F '=' '{if($1 ~ /'"$ENV_REGEX"'/) print}' > $ENV_FILE
  trap "rm -f $ENV_FILE" EXIT
  ENV_FILE_OPT="--env-file=$ENV_FILE"
fi

MAP_CURRENT_DIR_OPT="-v $CURRENT_DIR:$CONTAINER_HOME"
# Inception detection
if [ -f '/proc/1/cgroup' ]; then
  CURRENT_CONTAINER=$(grep '/docker/' -- /proc/1/cgroup | head -n1 | cut -d '/' -f 3)
  if [ -n "${CURRENT_CONTAINER}" ]; then
    # Maps volumes from current container
    EXTRA_OPTS="${EXTRA_OPTS:-} --volumes-from $CURRENT_CONTAINER"

    # If current directory is inside any of the mounts of the current container
    MOUNTS=$(docker inspect --format='{{range .Mounts}} -e '{{.Destination}}'{{end}}' ${CURRENT_CONTAINER})
    if [ "0" != $(echo "${CURRENT_DIR}" | grep ${MOUNTS}) ]; then
      MAP_CURRENT_DIR_OPT=''
    fi
  fi
fi

RM_OPT=${RM_OPT=--rm}

# Enables interactive TTY if available
TTY_OPT="-i"
[ -t 0 ] && TTY_OPT="-it"

printf 'GET /_ping HTTP/1.1\nHost: anything\n\n' | nc -U /var/run/docker.sock >&2

[ -n "${XTRACE:-}" ] && set -o xtrace
docker run $RM_OPT $TTY_OPT \
  $MAP_CURRENT_DIR_OPT \
  -e HOME=$CONTAINER_HOME -w $CONTAINER_HOME \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --net=host \
  ${ENV_FILE_OPT:-} ${EXTRA_OPTS:-} \
  $IMAGE "$@"
